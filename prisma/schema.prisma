generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String?
  email              String              @unique
  image              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  sessions           Session[]
  movies             Movie[]
  accounts           Account[]
  verificationTokens VerificationToken[]
}

model Account {
  id                 String    @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  user               User      @relation(fields: [userId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([provider, providerAccountId])
}

model Movie {
  id          String   @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  thumbnail   String?
  genre       String?
  duration    Int? // Dauer in Minuten
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid())
  token      String   @unique
  identifier String
  expires    DateTime
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
